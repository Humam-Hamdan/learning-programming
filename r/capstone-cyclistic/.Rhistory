# Install required packages
# tidyverse for data import and wrangling
# libridate for date functions
# ggplot for visualization
# # # # # # # # # # # # # # # # # # # # # # #
library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data
getwd() #displays your working directory
# setwd("/Users/kevinhartman/Desktop/Divvy_Exercise/csv") #sets your working directory to simplify calls to data ... make sure to use your OWN username instead of mine ;)
#=====================
# STEP 1: COLLECT DATA
#=====================
# Upload Divvy datasets (csv files) here
q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
### Cyclistic_Exercise_Full_Year_Analysis ###
# This analysis is for case study 1 from the Google Data Analytics Certificate (Cyclistic).  It’s originally based on the case study "'Sophisticated, Clear, and Polished’: Divvy and Data Visualization" written by Kevin Hartman (found here: https://artscience.blog/home/divvy-dataviz-case-study). We will be using the Divvy dataset for the case study. The purpose of this script is to consolidate downloaded Divvy data into a single dataframe and then conduct simple analysis to help answer the key question: “In what ways do members and casual riders use Divvy bikes differently?”
# # # # # # # # # # # # # # # # # # # # # # #
# Install required packages
# tidyverse for data import and wrangling
# libridate for date functions
# ggplot for visualization
# # # # # # # # # # # # # # # # # # # # # # #
library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data
getwd() #displays your working directory
# setwd("/Users/kevinhartman/Desktop/Divvy_Exercise/csv") #sets your working directory to simplify calls to data ... make sure to use your OWN username instead of mine ;)
#=====================
# STEP 1: COLLECT DATA
#=====================
# Upload Divvy datasets (csv files) here
#q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
#q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")
#q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")
#====================================================
# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE
#====================================================
# Compare column names each of the files
# While the names don't have to be in the same order, they DO need to match perfectly before we can use a command to join them into one file
#colnames(q3_2019)
#colnames(q4_2019)
#colnames(q2_2019)
colnames(q1_2020)
# Rename columns  to make them consisent with q1_2020 (as this will be the supposed going-forward table design for Divvy)
#(q4_2019 <- rename(q4_2019,ride_id = trip_id,rideable_type = bikeid ,started_at = start_time,ended_at = end_time  ,start_station_name = from_station_name ,start_station_id = from_station_id ,end_station_name = to_station_name ,end_station_id = to_station_id ,member_casual = usertype))
#(q3_2019 <- rename(q3_2019,ride_id = trip_id,rideable_type = bikeid ,started_at = start_time,ended_at = end_time,start_station_name = from_station_name,start_station_id = from_station_id,end_station_name = to_station_name    ,end_station_id = to_station_id ,member_casual = usertype))
#(q2_2019 <- rename(q2_2019,ride_id = "01 - Rental Details Rental ID",rideable_type = "01 - Rental Details Bike ID" ,started_at = "01 - Rental Details Local Start Time"  ,ended_at = "01 - Rental Details Local End Time"  ,start_station_name = "03 - Rental Start Station Name" ,start_station_id = "03 - Rental Start Station ID",end_station_name = "02 - Rental End Station Name" ,end_station_id = "02 - Rental End Station ID",member_casual = "User Type"))
# Inspect the dataframes and look for inconguencies
str(q1_2020)
#str(q4_2019)
#str(q3_2019)
#str(q2_2019)
# Convert ride_id and rideable_type to character so that they can stack correctly
#q4_2019 <-  mutate(q4_2019, ride_id =as.character(ride_id),rideable_type =as.character(rideable_type))
#q3_2019 <-  mutate(q3_2019, ride_id =as.character(ride_id),rideable_type =as.character(rideable_type))
#q2_2019 <-  mutate(q2_2019, ride_id =as.character(ride_id),rideable_type =as.character(rideable_type))
# Stack individual quarter's data frames into one big data frame
# all_trips <- bind_rows(q2_2019, q3_2019, q4_2019, q1_2020)
all_trips <- bind_rows(q1_2020)
# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020
all_trips <- all_trips %>%
select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))
### Cyclistic_Exercise_Full_Year_Analysis ###
# This analysis is for case study 1 from the Google Data Analytics Certificate (Cyclistic).  It’s originally based on the case study "'Sophisticated, Clear, and Polished’: Divvy and Data Visualization" written by Kevin Hartman (found here: https://artscience.blog/home/divvy-dataviz-case-study). We will be using the Divvy dataset for the case study. The purpose of this script is to consolidate downloaded Divvy data into a single dataframe and then conduct simple analysis to help answer the key question: “In what ways do members and casual riders use Divvy bikes differently?”
# # # # # # # # # # # # # # # # # # # # # # #
# Install required packages
# tidyverse for data import and wrangling
# libridate for date functions
# ggplot for visualization
# # # # # # # # # # # # # # # # # # # # # # #
library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data
getwd() #displays your working directory
# setwd("/Users/kevinhartman/Desktop/Divvy_Exercise/csv") #sets your working directory to simplify calls to data ... make sure to use your OWN username instead of mine ;)
#=====================
# STEP 1: COLLECT DATA
#=====================
# Upload Divvy datasets (csv files) here
#q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
#q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")
#q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")
#====================================================
# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE
#====================================================
# Compare column names each of the files
# While the names don't have to be in the same order, they DO need to match perfectly before we can use a command to join them into one file
#colnames(q3_2019)
#colnames(q4_2019)
#colnames(q2_2019)
colnames(q1_2020)
# Rename columns  to make them consisent with q1_2020 (as this will be the supposed going-forward table design for Divvy)
#(q4_2019 <- rename(q4_2019,ride_id = trip_id,rideable_type = bikeid ,started_at = start_time,ended_at = end_time  ,start_station_name = from_station_name ,start_station_id = from_station_id ,end_station_name = to_station_name ,end_station_id = to_station_id ,member_casual = usertype))
#(q3_2019 <- rename(q3_2019,ride_id = trip_id,rideable_type = bikeid ,started_at = start_time,ended_at = end_time,start_station_name = from_station_name,start_station_id = from_station_id,end_station_name = to_station_name    ,end_station_id = to_station_id ,member_casual = usertype))
#(q2_2019 <- rename(q2_2019,ride_id = "01 - Rental Details Rental ID",rideable_type = "01 - Rental Details Bike ID" ,started_at = "01 - Rental Details Local Start Time"  ,ended_at = "01 - Rental Details Local End Time"  ,start_station_name = "03 - Rental Start Station Name" ,start_station_id = "03 - Rental Start Station ID",end_station_name = "02 - Rental End Station Name" ,end_station_id = "02 - Rental End Station ID",member_casual = "User Type"))
# Inspect the dataframes and look for inconguencies
str(q1_2020)
#str(q4_2019)
#str(q3_2019)
#str(q2_2019)
# Convert ride_id and rideable_type to character so that they can stack correctly
#q4_2019 <-  mutate(q4_2019, ride_id =as.character(ride_id),rideable_type =as.character(rideable_type))
#q3_2019 <-  mutate(q3_2019, ride_id =as.character(ride_id),rideable_type =as.character(rideable_type))
#q2_2019 <-  mutate(q2_2019, ride_id =as.character(ride_id),rideable_type =as.character(rideable_type))
# Stack individual quarter's data frames into one big data frame
# all_trips <- bind_rows(q2_2019, q3_2019, q4_2019, q1_2020)
all_trips <- bind_rows(q1_2020)
# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020
#all_trips <- all_trips %>%
select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))
all_trips <- all_trips %>% select(-c(start_lat, start_lng, end_lat, end_lng, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))
all_trips <- all_trips %>% select(-c(start_lat, start_lng, end_lat, end_lng, ))
# In the "member_casual" column, replace "Subscriber" with "member" and "Customer" with "casual"
# Before 2020, Divvy used different labels for these two types of riders ... we will want to make our dataframe consistent with their current nomenclature
# N.B.: "Level" is a special property of a column that is retained even if a subset does not contain any values from a specific level
# Begin by seeing how many observations fall under each usertype
table(all_trips$member_casual)
# Reassign to the desired values (we will go with the current 2020 labels)
all_trips <-  all_trips %>%
mutate(member_casual = recode(member_casual
,"Subscriber" = "member"
,"Customer" = "casual"))
# Check to make sure the proper number of observations were reassigned
table(all_trips$member_casual)
# Add columns that list the date, month, day, and year of each ride
# This will allow us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level
# https://www.statmethods.net/input/dates.html more on date formats in R found at that link
all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")
# Add a "ride_length" calculation to all_trips (in seconds)
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/difftime.html
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)
# Inspect the structure of the columns
str(all_trips)
# Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)
# Remove "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
# We will create a new version of the dataframe (v2) since data is being removed
# https://www.datasciencemadesimple.com/delete-or-drop-rows-in-r-with-conditions-2/
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]
#=====================================
# STEP 4: CONDUCT DESCRIPTIVE ANALYSIS
#=====================================
# Descriptive analysis on ride_length (all figures in seconds)
mean(all_trips_v2$ride_length) #straight average (total ride length / rides)
median(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length) #longest ride
min(all_trips_v2$ride_length) #shortest ride
view(mean_max_median_all)
# You can condense the four lines above to one line using summary() on the specific attribute
summary(all_trips_v2$ride_length)
summary(tripcld7$trip_duration)
summary(tripcasual$trip_duration)
# Compare members and casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)
# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
# Notice that the days of the week are out of order. Let's fix that.
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
# Now, let's run the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
# analyze ridership data by type and weekday
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
group_by(member_casual, weekday) %>%  #groups by usertype and weekday
summarise(number_of_rides = n()							#calculates the number of rides and average duration
,average_duration = mean(ride_length)) %>% 		# calculates the average duration
arrange(member_casual, weekday)								# sorts
# Let's visualize the number of rides by rider type
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")
# Let's visualize the number of rides by rider type
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")
# Let's visualize the number of rides by rider type
all_trips_v2 <- mutate(weekday = wday(started_at, label = TRUE)) %>% group_by(member_casual, weekday) %>%
summarise(number_of_rides = n(),average_duration = mean(ride_length)) %>% arrange(member_casual, weekday)
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +  geom_col(position = "dodge")
ggplot(all_trips_v2, aes(x = weekday, y = number_of_rides, fill = member_casual)) +  geom_col(position = "dodge")
# Let's visualize the number of rides by rider type
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")
# Let's create a visualization for average duration
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge")
avg_trip_all <- summarise(tripcld7, mean(trip_duration))
avg_trip_all <- summarise(tripcld7, mean(trip_duration)) %>% view()
colnames(tripcld7)
tripdrop1 <- subset(tripcld7, select = -c(ride_id, rideable_type,start_station_name,start_station_id,end_station_name,end_station_id,member_casual,started_at_fix,ended_at_fix)) %>% view()
tripgroupday <- group_by(tripdrop1, weekday) %>% view()
# need to: sum trip duration by weekday, so 2 aggregations
tripagg <- aggregate(tripdrop1, by = "weekday")
# need to: sum trip duration by weekday, so 2 aggregations
tripagg <- aggregate(tripdrop1, by = "weekday", FUN)
# need to: sum trip duration by weekday, so 2 aggregations
tripagg <- aggregate(tripdrop1, by = "weekday", FUN=mean)
# need to: sum trip duration by weekday, so 2 aggregations
tripagg <- aggregate(tripdrop1, FUN=mean)
# need to: sum trip duration by weekday, so 2 aggregations
tripagg <- aggregate(tripdrop1, by,FUN=mean)
# need to: sum trip duration by weekday, so 2 aggregations
tripagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean)
# need to: sum trip duration by weekday, so 2 aggregations
tripagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean) %>% view()
# need to: sum trip duration by weekday, so 2 aggregations
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean)
tripcouagg <- aggregate(tripcld7$ride_id ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean)
tripcouagg <- aggregate(tripcld7$ride_id ~ tripcld7$weekday, FUN=mean)
tripcouagg <- aggregate(tripcld7$ride_id ~ tripcld7$weekday, FUN=median)
median
tripcouagg <- aggregate(tripcld7$ride_id ~ tripcld7$weekday, FUN=)
# need to: sum trip duration by weekday, so 2 aggregations
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean) %>% view()
tripcouagg <- aggregate(tripcld7$ride_id ~ tripcld7$weekday + tripcld7$trip_duration, FUN=mean) %>% view()
class(tripcld7$ride_id)
view(tripcld7$ride_id)
#
tripcouagg <- aggregate(tripcld7$start_station_id ~ tripcld7$weekday + tripcld7$trip_duration, FUN=mean) %>% view()
#
tripcouagg <- aggregate(tripcld7$weekday ~ tripcld7$member_casual + tripcld7$trip_duration, FUN=mean) %>% view()
# need to: sum trip duration by weekday, so 2 aggregations => basic aggregate
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean) %>% view()
view(tripcld7)
#
tripcouagg <- aggregate(tripcld7$ride_id ~ tripcld7$weekday + tripcld7$trip_duration, FUN=mean) %>% view()
#
tripcouagg <- aggregate(tripcld7$ride_id ~ tripcld7$weekday + tripcld7$trip_duration, FUN=mean,data=tripcld7) %>% view()
class(tripcld7$ride_id)
view(tripcld7$ride_id)
# ride_id isn't a num... so error...
tripcouagg <- aggregate(tripcld7$ride_id ~ tripcld7$weekday + tripcld7$trip_duration, FUN=max,data=tripcld7) %>% view()
# ride_id isn't a num... so error...
tripcouagg <- aggregate(tripcld7$weekday ~ tripcld7$ride_id + tripcld7$trip_duration, FUN=max,data=tripcld7) %>% view()
# ride_id isn't a num... so error...
tripcouagg <- aggregate(tripcld7$weekday ~ tripcld7$ride_id + tripcld7$trip_duration, FUN=max,data=tripcld7) %>% view()
# ride_id isn't a num... so error...
tripcouagg <- aggregate(tripcld7$weekday ~ tripcld7$ride_id + tripcld7$trip_duration, FUN=mean,data=tripcld7) %>% view()
# ride_id isn't a num... so error...
tripcouagg <- aggregate(tripcld7$weekday ~ tripcld7$ride_id + tripcld7$trip_duration, FUN=mean,data=tripcld7) %>% view()
# ride_id isn't a num... so error...
tripcouagg <- aggregate(tripcld7$weekday ~ tripcld7$ride_id, FUN=mean,data=tripcld7) %>% view()
# ride_id isn't a num... so error...
tripcouagg <- aggregate(tripcld7$ride_id ~ tripcld7$weekday, FUN=mean,data=tripcld7) %>% view()
# ride_id isn't a num... so error...
tripcouagg <- aggregate(count(tripcld7$ride_id) ~ tripcld7$weekday, FUN=mean,data=tripcld7) %>% view()
trippday <- count(tripcld7, ride_id) %>% view
trippday <- count(tripcld7, weekday) %>% view
trippday <- count(tripcld7, number_per_day = weekday) %>% view
trippday <- count(tripcld7, "number_per_day" = weekday) %>% view
trippday <- count(tripcld7, weekday + member_casual) %>% view
trippday <- count(tripcld7, weekday, member_casual) %>% view
# ride_id isn't a num... so error...
tripcouagg <- aggregate(count(tripcld7, weekday, member_casual) ~ tripcld7$weekday, FUN=mean,data=tripcld7) %>% view()
# ride_id isn't a num... so error...
tripcouagg <- aggregate(trippday ~ tripcld7$weekday, FUN=mean,data=tripcld7) %>% view()
trippday <- count(tripcld7, weekday, member_casual) %>% view
# ride_id isn't a num... so error...
tripcouagg <- aggregate(trippday$n ~ tripcld7$weekday, FUN=mean,data=tripcld7) %>% view()
# ride_id isn't a num... so error...
tripcouagg <- aggregate(trippday$weekday ~ tripcld7$weekday, FUN=mean,data=tripcld7) %>% view()
# ride_id isn't a num... so error...
tripcouagg <- aggregate(trippday$weekday ~ tripcld7$weekday, FUN=mean) %>% view()
trippday <- count(tripcld7, weekday) %>%  %>%  view
trippday <- count(tripcld7, weekday)  %>%  view
tripcasual <- filter(tripcld7, member_casual == "casual") %>% subset(tripcasual, select=-c(member_casual, rideable_type, end_station_id, start_station_id, ride_id))
knitr::opts_chunk$set(echo = TRUE)
```{r removing var}
rm(list=ls())
library(tidyverse)
library(tidyverse)
tripsq <- read.csv("Divvy_Trips_2020_Q1.csv")
# dropping long & alt cols
tripcld1 <- subset(tripsq, select=-c(start_lat, end_lat, start_lng, end_lng))
#check type: class(tripcld1[3,2]) = character
start_fix <- as_datetime(tripcld1$started_at)
end_fix <- as_datetime(tripcld1$ended_at)
# check type:
class(end_fix)
# adding start_fix as a new col, and dropping the old one
tripcld2 <- cbind(tripcld1, started_at_fix = start_fix)
# change validation:
class(tripcld3$ended_at_fix)
# adding start_fix as a new col, and dropping the old one
tripcld2 <- cbind(tripcld1, started_at_fix = start_fix)
tripcld3 <- cbind(tripcld2, ended_at_fix = end_fix)
# change validation:
class(tripcld3$ended_at_fix)
# dropping old start-end
tripcld4 <- subset(tripcld3, select=-c(started_at, ended_at))
# check class
class(tripcld4$started_at_fix)
class(tripcld4$ended_at_fix)
# adding trip_duartion and defining it
tripcld5 <- cbind(tripcld4, trip_duration = tripcld4$ended_at_fix - tripcld4$started_at_fix)
# check names-values-class
colnames(tripcld5)
length(unique(tripcld5$ride_id)) == nrow(tripcld5)
# No duplicates
dim(tripcld5[duplicated(tripcld5$ride_id),])[1]
is.null(tripcld5)
weekday <- weekdays(tripcld5$started_at_fix)
tripcld6 <- cbind(tripcld5, weekday = weekday)
str(tripcld6)
tripcld7 <- filter(tripcld6, trip_duration > 0)
tripcasual <- filter(tripcld7, member_casual == "casual")
tripcasual <-subset(tripcasual, select=-c(member_casual, rideable_type, end_station_id, start_station_id, ride_id))
tripmember <- filter(tripcld7, member_casual == "member")
tripmember <- subset(tripmember, select=-c(member_casual, rideable_type, end_station_id, start_station_id, ride_id))
mean_max_median_all <- summarise(tripcld7, mean_ride = mean(trip_duration), max_ride_ = max(trip_duration), median_ride = median(trip_duration), min_ride = min(trip_duration))
mean_max_median_member <- summarise(tripmember, mean_ride = mean(trip_duration), max_ride_ = max(trip_duration), median_ride = median(trip_duration), min_ride = min(trip_duration))
mean_max_median_casual <- summarise(tripcasual, mean_ride = mean(trip_duration), max_ride_ = max(trip_duration), median_ride = median(trip_duration), min_ride = min(trip_duration))
# need to: sum trip duration by weekday, so 2 aggregations => basic aggregate
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean) # %>% view()
trippday <- count(tripcld7, weekday) #%>%  view
tripcld7 %>% group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(ride_length)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) + geom_col(position = "dodge")
tripcld7 %>% group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) + geom_col(position = "dodge")
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge")
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% save()
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% save(ride_duration_per_member.jpg)
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% save("ride_duration_per_member.jpg")
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% ggsave("ride_duration_per_member.jpg")
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% ggsave(ride_duration_per_member.jpg)
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% ggsave(ride_duration_per_member)
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% ggsave(ride_duration_per_member.png)
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% ggsave(viz.png)
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% ggsave("viz)
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% ggsave("viz")
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% ggsave("viz")
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% ggsave("viz.png")
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") %>% ggsave("viz.png")
ggsave(duration_per_member.png)
ggsave("duration_per_member.png")
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge")
ggsave("duration_per_member.png")
tripcld7 %>% group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) + geom_col(position = "dodge")
ggsave("ride_per_member.png")
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge")
ggsave("duration_per_member.png")
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") + labs(x="Weekday", y="Average Trip Duration")
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") + labs(x="Weekday", y="Average Trip Duration") + guide(fill=guide_legend(title="Member or Casual"))
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") + labs(x="Weekday", y="Average Trip Duration") + guides(fill=guide_legend(title="Member or Casual"))
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") + labs(x="Weekday", y="Average Trip Duration") + guides(fill=guide_legend(title="Member or Casual"))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") + labs(x="Weekday", y="Average Trip Duration") + guides(fill=guide_legend(title="Member or Casual"))
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") + labs(x="Weekday", y="Average Trip Duration") + guides(fill=guide_legend(title="Member or Casual"))+ theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") + labs(x="Weekday", y="Average Trip Duration") + guides(fill=guide_legend(title="Member or Casual"))+ theme(axis.text.x = element_text(angle = 45))
tripcld7 %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>% arrange(member_casual, weekday)  %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge") + labs(x="Weekday", y="Average Trip Duration") + guides(fill=guide_legend(title="Member or Casual"))+ theme(axis.text.x = element_text(angle = 45,hjust=1))
tripcld7 %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge") +
geom_text(aes(label=paste0(Return,"%"), hjust="left"))
tripcld7 %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge") +
geom_text(aes(label=paste0(Return,"%"), hjust="left")) +
labs(x="Weekday", y="Average Trip Duration") +
guides(fill=guide_legend(title="Member or Casual"))+
theme(axis.text.x = element_text(angle = 45,hjust=1))
tripcld7 %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge") +
labs(x="Weekday", y="Average Trip Duration") +
guides(fill=guide_legend(title="Member or Casual"))+
theme(axis.text.x = element_text(angle = 45,hjust=1))
ggsave("duration_per_member.png")
tripcld7 %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")+
labs(x="Weekday", y="Average Trip Duration") +
guides(fill=guide_legend(title="Member or Casual"))+
theme(axis.text.x = element_text(angle = 45,hjust=1))
ggsave("ride_per_member.png")
tripcld7 %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge") +
labs(x="Weekday", y="Average Trip Duration by Second") +
guides(fill=guide_legend(title="Member or Casual"))+
theme(axis.text.x = element_text(angle = 45,hjust=1))
ggsave("duration_per_member.png")
tripcld7 %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")+
labs(x="Weekday", y="Average Trip Duration by Second") +
guides(fill=guide_legend(title="Member or Casual"))+
theme(axis.text.x = element_text(angle = 45,hjust=1))
ggsave("ride_per_member.png")
mean_max_median_all <- summarise(tripcld7, mean_ride = mean(trip_duration), max_ride_ = max(trip_duration), median_ride = median(trip_duration), min_ride = min(trip_duration))
view(mean_max_median_all)
mean_max_median_member <- summarise(tripmember, mean_ride = mean(trip_duration), max_ride_ = max(trip_duration), median_ride = median(trip_duration), min_ride = min(trip_duration))
view(mean_max_median_member)
mean_max_median_casual <- summarise(tripcasual, mean_ride = mean(trip_duration), max_ride_ = max(trip_duration), median_ride = median(trip_duration), min_ride = min(trip_duration))
view(mean_max_median_casual)
# need to: sum trip duration by weekday, so 2 aggregations => basic aggregate
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean) # %>% view()
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean)  %>% view()
trippday <- count(tripcld7, weekday) #%>%  view
trippday <- count(tripcld7, weekday) %>%  view
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean)  %>% view()
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean/60)  %>% view()
tripduagg <- aggregate(tripcld7$trip_duration/60 ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean)  %>% view()
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean/60)  %>% view()
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean/60)  %>% view()
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean)  %>% view()
tripduagg <- aggregate(tripcld7$trip_duration/60 ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean)  %>% view()
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean)  %>% view()
trippday <- count(tripcld7, weekday) #%>%  view
trippday <- count(tripcld7, weekday) %>%  view
tripduagg <- aggregate(tripcld7$trip_duration ~ tripcld7$member_casual + tripcld7$weekday,FUN=mean)  %>% view()
tripcld7 %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")+
labs(x="Weekday", y="Average Trip Duration by Second") +
guides(fill=guide_legend(title="Member or Casual"))+
theme(axis.text.x = element_text(angle = 45,hjust=1))
tripcld7 %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge") +
guides(fill=guide_legend(title="Member or Casual"))+
theme(axis.text.x = element_text(angle = 45,hjust=1))
tripcld7 %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")+
labs(x="Weekday", y="Number of Rides") +
guides(fill=guide_legend(title="Member or Casual"))+
theme(axis.text.x = element_text(angle = 45,hjust=1))
ggsave("ride_per_member.png")
tripcld7 %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge")  +
guides(fill=guide_legend(title="Member or Casual"))+
theme(axis.text.x = element_text(angle = 45,hjust=1))
tripcld7 %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n() ,average_duration = mean(trip_duration)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge") +
labs(x="Weekday", y="Average Trip Duration by Second") +
guides(fill=guide_legend(title="Member or Casual"))+
theme(axis.text.x = element_text(angle = 45,hjust=1))
ggsave("duration_per_member.png")
trippday <- count(tripcld7, weekday) %>%  view
